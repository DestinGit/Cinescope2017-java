/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package boundaries;

import bdd.metroModel;
import fileManager.CSV2BD;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import fileManager.ratpFile;

/**
 *
 * @author formation
 */
public class JIFTransfertFile extends javax.swing.JInternalFrame {

    /**
     * Creates new form JIFTransfertFile
     */
    public JIFTransfertFile() {
        initComponents();

        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextFieldFileName = new javax.swing.JTextField();
        jButtonTransfertFile = new javax.swing.JButton();
        jLabelMessage = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Transfert CSV 2 BD");

        jLabel1.setText("fichier CSV à transferer (sans extension)");

        jButtonTransfertFile.setText("Transférer vers la table");
        jButtonTransfertFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTransfertFileActionPerformed(evt);
            }
        });

        jLabelMessage.setText("Message");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldFileName, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                    .addComponent(jButtonTransfertFile, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(112, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonTransfertFile)
                .addGap(44, 44, 44)
                .addComponent(jLabelMessage)
                .addContainerGap(53, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonTransfertFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTransfertFileActionPerformed
        // TODO add your handling code here:
        jLabelMessage.setText("Transfert en cours ... Merci de patienter");
//        String fileName = jTextFieldFileName.getText().toString() + ".csv";
        // Création du fichier tempo qui supprime les doublons
//        String newFile = ratpFile.cleanDuplicatesData(fileName);
//        insertDataOnDB(newFile);
        
        String fileName = jTextFieldFileName.getText().toString();
//        insertDataOnDB(fileName);
        CSV2BD.CSV2BD(fileName);
        jLabelMessage.setText("Transfert terminé");
    }//GEN-LAST:event_jButtonTransfertFileActionPerformed

    /**
     * 
     * @param fileName 
     */
    private void insertDataOnDB(String fileName) {
        metroModel metro = new metroModel();

        
        File f = new File(fileName);
        // Tester l'existence du fichier
        if (f.exists()) {
            try {
                // --- Ouverture du fichier
                FileReader lfrFile = new FileReader(fileName);
                // --- Bufferisation
                BufferedReader lbrBuffer = new BufferedReader(lfrFile);
                String lsLine;
                // --- Lecture des lignes-enregistrements
                // et boucle
                while ((lsLine = lbrBuffer.readLine()) != null) {
                    if (!lsLine.isEmpty()) {
                        String[] t = lsLine.split(";");
                        if (t.length > 2) {
                            metro.insertData(t[0], t[1], t[2]);
                        }
                    }
                }
                
                // Fermeture du buffer et du fichier
                lbrBuffer.close();
                lfrFile.close();
                
            } catch (IOException e) {

            }
            // Supprimer le fichier tempo
//            f.delete();
            // Déconnection de la BD
//            metro.disconnect();
            
        }
        jLabelMessage.setText("Transfert terminé");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonTransfertFile;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelMessage;
    private javax.swing.JTextField jTextFieldFileName;
    // End of variables declaration//GEN-END:variables
}
